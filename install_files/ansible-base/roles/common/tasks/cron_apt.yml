---
- name: install cron-apt to handle unattended security upgrades
  apt:
    name: cron-apt
    state: latest
  tags:
    - apt
    - cron-apt

- name: ensure custom cron-apt config file is present
  copy:
    src: cron-apt-config
    dest: /etc/cron-apt/config
  tags:
    - apt
    - cron-apt

- name: ensure security.list file exists
  template:
    src: security.list
    dest: /etc/apt/security.list
  tags:
    - apt

- name: ensure cron-apt updates the security.list packages
  copy:
    src: 0-update
    dest: /etc/cron-apt/action.d/0-update
  tags:
    - apt
    - cron-apt

- name: ensure cron-apt upgrades the secruity.list packages
  copy:
    src: 5-security
    dest: /etc/cron-apt/action.d/5-security
  tags:
    - apt
    - cron-apt

  # The default config file would download all security update every night
  # regardless if they were a security update. we only need it download and
  # install the security updates.
- name: ensure default cron-apt file to download all updates does not exist
  file:
    dest: /etc/cron-apt/action.d/3-download
    state: absent
  tags:
    - apt
    - cron-apt

- name: ensure the cron.d config for cron-apt exists
  copy:
    src: cron-apt
    dest: /etc/cron.d/cron-apt
    mode: '644'
    owner: root
  tags:
    - apt
    - cron-apt

- name: perform safe upgrade to ensure all the packages are updated
  apt:
    upgrade: safe
  tags:
    - apt
    - apt-upgrade

- stat:
    path: /var/run/reboot-required
  register: reboot_required
  tags:
    - reboot

- name: reboot if required due to security updates
  command: reboot
  when: reboot_required.stat.exists
  tags:
    - reboot

- name: waiting for server to come back
  local_action:
    # action/local_action modules don't support
    # dict-style arg declaration, so use 'key=value' syntax
    module: wait_for
      host={{ ansible_ssh_host }}
      port={{ ansible_ssh_port }}
      delay=20
      state=started
  when: reboot_required.stat.exists
  sudo: false
  tags:
    - reboot
